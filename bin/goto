#!/usr/bin/env bash


# Checking if we are sourced
# see: https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
[[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && _GOTO_IS_SOURCED=0 || _GOTO_IS_SOURCED=1


. _gotoutils
load_gotopath


function _goto_main {
    local PROJECT URI

    #   "Neo, sooner or later you're going to realize, just as I did,
    #   that there's a difference between knowing the
    #   path and walking the path." - Morpheus

    if [[ ! "$1" =~ ^(--check-migrate|--migrate)$ ]] && detect_unmigrated_data; then
        goto --check-migrate
        return $?
    fi


    # If goto is  run in sourced mode, contiune.
    # Else: print warning. NO EXIT statement.
    if [[ $_GOTO_IS_SOURCED -eq 0 ]]; then

        PROJECT=$(cat "${GOTOPATH}/active-project")

        # Catching deactivated state
        if [ -z "$PROJECT" ]; then
            _no_project
            return 1
        fi


        # General case
        if [ -n "$(command -v the_real_goto.py)" ]; then
            the_real_goto.py "$PROJECT" "$@"
        else
            echo "Error the_real_goto.py not found" >&2
            return 1
        fi

    else
        _not_installed
        exit 1
    fi
}

function _no_project {
    echo "Ah hoy!" >&2
    echo >&2
    echo "Goto has no project context set." >&2
    echo >&2
    echo "An example project is bundled with goto, it is called goto." >&2
    echo "You may try  it by typing:" >&2
    echo >&2
    echo "     project goto" >&2
    echo >&2
    echo "Other usefull commands to work with projects:" >&2
    echo "    create project:   project add <project-name>" >&2
    echo "    more help:        project help" >&2
}

function _not_installed {
    echo "Ah hoy!" >&2
    echo >&2
    echo "In order to make goto work properly, run this command now:" >&2
    echo >&2
    echo "       install_goto" >&2
    echo >&2
}


_goto_main "$@"
